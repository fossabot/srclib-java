allprojects {
    task srclibCollectMetaInformation << { task ->

        String desc = task.project.description
        if (desc == null) {
            desc = ""
        }

        println "ARTIFACT $task.project.name"
        println "DESCRIPTION $desc"
        println "GROUP $task.project.group"
        println "VERSION $task.project.version"
        println "PROJECTDIR $task.project.projectDir"
        println "ROOTDIR $task.project.rootDir"


        try {
            task.project.configurations.each {
                conf ->
                    conf.resolvedConfiguration.getResolvedArtifacts().each {
                        String group = it.moduleVersion.id.group
                        String name = it.moduleVersion.id.name
                        String version = it.moduleVersion.id.version
                        String file = it.file
                        if (conf.name == "compile" || conf.name == "testCompile") {
                        	println "DEPENDENCY $conf.name:$group:$name:$version:$file"
                        }
                    }

                    conf.getAllDependencies().each {d ->
                    	if (d instanceof ProjectDependency) {
                    		Project p = ((ProjectDependency) d).getDependencyProject()
                        	if (conf.name == "compile" || conf.name == "testCompile") {
                    			println "PROJECTDEPENDENCY $p.buildFile.absolutePath"
                    		}
                    	}
                    }

            }
        } catch (ignored) {
        }

        try {
            task.project.plugins.withType(JavaPlugin) {
                sourceSets.all {
                    java {
                        files.each { File file ->
                            println "SOURCEFILE $file.absolutePath"
                        }
                        srcDirs.each { File file ->
                            println "SOURCEDIR $file.absolutePath"
                        }
                    }
                }
            }
        } catch (ignored) {
        }

        try {
            task.project.plugins.withType(JavaPlugin) {
            	compileJava {
					println "SOURCEVERSION $sourceCompatibility"
            		String encoding = options.encoding
            		if (encoding == null) {
            			encoding = "";
            		}
            		println("ENCODING $encoding")
            	}
            }
        } catch (ignored) {
        }
        try {
            task.project.plugins.withType(JavaPlugin) {
                configurations.each { Configuration config ->
                   	if (config.name == "compile" || config.name == "testCompile") {
                    	println "CLASSPATH $config.asPath"
                    }
                }
            }
        } catch (ignored) {
        }

    }
}
