def isConfigSupported(conf) {
	return (conf.name == "compile" || conf.name == "testCompile" || conf.name == "provided" ||  conf.name == "compileOnly");
}

def listSourceFiles(task) {

    task.source.each {File file ->
        println "SOURCEFILE $file.absolutePath"
    }
}

def listSourceDirs(task, sourceSetsHolder, sourceSetName) {
    try {
        Object ss = sourceSetsHolder.sourceSets.getByName(sourceSetName);
        if (!ss) {
            return
        }
        ss.java.srcDirs.each{File file ->
                println "SOURCEDIR $task.project.group:$task.project.name:$task.project.version:$file.absolutePath"
        }
    } catch (UnknownDomainObjectException ignored) {
    }
}

allprojects {

    task srclibCollectMetaInformation << { task ->

        String desc = task.project.description
        if (desc == null) {
            desc = ""
        }

        println "ARTIFACT $task.project.name"
        println "DESCRIPTION $desc"
        println "GROUP $task.project.group"
        println "VERSION $task.project.version"
        println "PROJECTDIR $task.project.projectDir"
        println "ROOTDIR $task.project.rootDir"
        if (task.project.buildFile) {
            println "GRADLEFILE $task.project.buildFile.absolutePath"
        }


        boolean android = false

        task.project.plugins.any {p ->
            android = p.getClass().getName().startsWith("com.android.build.gradle")
            return android
        }

        try {
            task.project.configurations.each { conf ->
                conf.resolvedConfiguration.getResolvedArtifacts().each {
                    try {
                        String group = it.moduleVersion.id.group
                        String name = it.moduleVersion.id.name
                        String version = it.moduleVersion.id.version
                        String file = it.file
                        if (isConfigSupported(conf)) {
                            println "DEPENDENCY $conf.name:$group:$name:$version:$file"
                        }
                    } catch (Exception e) {
                        println "WARNING $e"
                    }
                }

                conf.getAllDependencies().each { d ->
                    if (d instanceof ProjectDependency) {
                        Project p = ((ProjectDependency) d).getDependencyProject()
                        if (isConfigSupported(conf)) {
                            if (p.buildFile) {
                                println "PROJECTDEPENDENCY $p.name:$p.group:$p.buildFile.absolutePath"
                            } else {
                                println "PROJECTDEPENDENCY $p.name:$p.group:"
                            }

                        }
                    }
                }

            }
        } catch (e) {
            println "WARNING $e"
        }

        try {
            task.project.plugins.withType(JavaPlugin) {plugin ->
                listSourceFiles(compileJava)
                listSourceFiles(compileTestJava)

                listSourceDirs(task, plugin, "main")
                listSourceDirs(task, plugin, "test")
            }
        } catch (e) {
            println "WARNING $e"
        }

        try {
            task.project.plugins.withType(JavaPlugin) {
                compileJava {
                    println "SOURCEVERSION $sourceCompatibility"
                    String encoding = options.encoding
                    if (encoding == null) {
                        encoding = "";
                    }
                    println("ENCODING $encoding")
                }
            }
        } catch (e) {
            println "WARNING $e"
        }

        try {
            task.project.plugins.withType(JavaPlugin) {
                configurations.each { Configuration config ->
                    if (isConfigSupported(config)) {
                        println "CLASSPATH $config.asPath"
                    }
                }
            }
        } catch (e) {
            println "WARNING $e"
        }

        if (android) {
            println "ANDROID-SDK $task.project.extensions.android.compileSdkVersion"
            String bootClasspath = task.project.extensions.android.bootClasspath.join(File.pathSeparator)
            println "BOOTCLASSPATH $bootClasspath"

            listSourceFiles(task.project.tasks.compileDebugJava)
            listSourceFiles(task.project.tasks.compileDebugUnitTestJava)
            listSourceFiles(task.project.tasks.compileReleaseJava)
            listSourceFiles(task.project.tasks.compileReleaseUnitTestJava)

            listSourceDirs(task, project.android, "main")
            listSourceDirs(task, project.android, "test")
        }

    }
}
